#!/usr/bin/env python

__author__ = "David Stainton"
__copyright__ = "Copyright 2010 Digg, Inc."

import os
import sys
from optparse import OptionParser
import re
import resource
import ftools

def matrix_to_string(matrix, header):
    """
Note: this function is from: http://mybravenewworld.wordpress.com/2010/09/19/print-tabular-data-nicely-using-python/
i modified it a bit. ;-)

 Return a pretty, aligned string representation
 of a nxm matrix.
 
 This representation can be used to print any
 tabular data, such as database results. It
 works by scanning the lengths of each element
 in each column, and determining the format
 string dynamically.
 
 @param matrix: Matrix representation (list with n rows
  of m elements).
 @param header: Optional tuple with header elements to be
  displayed.
    """
    lengths = []
    matrix = [header] + matrix
    for row in matrix:
        for column in row:
            i = row.index(column)
            cl = len(str(column))
            try:
                ml = lengths[i]
                if cl > ml:
                    lengths[i] = cl
            except IndexError:
                lengths.append(cl)
 
    lengths = tuple(lengths)
    format_string = ""
    for length in lengths:
        format_string += "%-" + str(length) + "s    "
    format_string += "\n"
 
    matrix_str = ""
    #matrix_str += format_string % header
    for row in matrix:
        matrix_str += format_string % tuple(row)
 
    return matrix_str

 
def main():
    usage = '%prog [options] <cassandra-data-directory>'
    parser = OptionParser(usage=usage)
    parser.add_option('-c', '--columnfamily-summarize', dest='columnfamily', action='store_true', default=False,
                      help="Summarize cached Cassandra data on a per Column Family basis.")
    parser.add_option('--exclude-filter', dest='exclude_filter', action='store_true', default=False,
                      help="Exclude statistics for Cassandra Filter files.")
    parser.add_option('--exclude-index', dest='exclude_index', action='store_true', default=False,
                      help="Exclude statistics for Cassandra Index files.")
    parser.add_option('--exclude-data', dest='exclude_data', action='store_true', default=False,
                      help="Exclude statistics for Cassandra Data files.")
    options, args = parser.parse_args()

    if len(args) < 1:
        parser.print_help()
        return 1

    if options.exclude_filter and options.exclude_index and options.exclude_data:
        print "Cannot exclude all three: data, filter and index."
        print "Exclude just one or two of them!"
        return 1

    page_size = resource.getpagesize()

    filetypes = {"Index":0,"Filter":0,"Data":0}
    if options.exclude_filter:
        del filetypes["Filter"]
    if options.exclude_index:
        del filetypes["Index"]
    if options.exclude_data:
        del filetypes["Data"]

    filetypes_filter = "|".join(filetypes.keys())

    data_dir = args[0]
    fileList = []
    cassandra_file_regex = re.compile("^.+/(\w+)-\d+-(%s)\.db$" % filetypes_filter)
    file_hash = {}

    for (path, dirs, files) in os.walk(data_dir):
        for myfile in files:
            fileList.append(os.path.join(path,myfile))
        break

    for filename in fileList:

        mymatch = cassandra_file_regex.match(filename)
        if not mymatch:
            continue

        fd = file(filename)
        pages_cached,pages_total = ftools.fincore_ratio(fd.fileno())
        fd.close()
        if pages_cached == 0:
            continue

        if options.columnfamily:
            if file_hash.has_key(mymatch.group(1)):
                file_hash[mymatch.group(1)] += (pages_cached * page_size)
            else:
                file_hash[mymatch.group(1)] = (pages_cached * page_size)
        else:
            if file_hash.has_key(filename):
                file_hash[filename] += (pages_cached * page_size)
            else:
                file_hash[filename] = (pages_cached * page_size)

    header = ['Column Family','Bytes in FS page-cache']
    rows = []
    for k,v in sorted(file_hash.items(), key=lambda x:x[1], reverse=True):
        rows.append([k,v])
    result = matrix_to_string(rows, header)
    print result

    return 0

if __name__ == '__main__':
    sys.exit(main())

